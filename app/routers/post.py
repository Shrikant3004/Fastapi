from .. import schema,models,database,oath2
from fastapi import Depends,status,Response,HTTPException,APIRouter
from sqlalchemy.orm  import Session
from typing import List

router = APIRouter(
    prefix="/posts",
    tags=["posts"]
) 

@router.get("/",response_model=List[schema.POST_Response]) #response
def get_posts(db : Session = Depends(database.get_db)):

    posts = db.query(models.Post).all()
    return posts


@router.post("/",status_code=status.HTTP_201_CREATED,response_model=schema.POST_Response) #response
def create_posts(post:schema.POST_Create,db : Session = Depends(database.get_db),get_current_user = Depends(oath2.get_current_user)):  #needs login

    #new_post = models.Post(title = post.title, content = post.content, published = post.published)
    new_post = models.Post(owner_id = get_current_user.id,**post.dict())
    db.add(new_post) #adding to db.
    db.commit()      #commiting changes
    db.refresh(new_post)  #storing those values to new_post that were generated by default(e.g. id, created_at)

    return new_post



@router.get("/{id}",response_model=schema.POST_Response) #response
def get_post(id:int,response:Response,db : Session = Depends(database.get_db)):

    posts = db.query(models.Post).filter(models.Post.id == id).first()

    if not posts:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND
                             ,detail=f"post not found of id {id}")
                           #or
        # response.status_code = status.HTTP_404_NOT_FOUND
        # return{"message":"post not found"}

    return posts


@router.delete("/{id}",status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id:int,db : Session = Depends(database.get_db),get_current_user = Depends(oath2.get_current_user)):

    posts_query = db.query(models.Post).filter(models.Post.id == id)
    posts = posts_query.first()
    
    if  not posts_query.first():
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail="page not found")
    
   
    if posts.owner_id != int(get_current_user.id):
         raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,
                            detail="invalid request for this credential")
    posts_query.delete()
    db.commit()
    return Response(status_code=status.HTTP_204_NO_CONTENT )


@router.put("/{id}",response_model=schema.POST_Response) #response
def update_post(id:int,post:schema.POST_Update,db : Session = Depends(database.get_db),get_current_user = Depends(oath2.get_current_user)):
   
    posts_query = db.query(models.Post).filter(models.Post.id == id)
    posts = posts_query.first()
    if posts_query.first()==None:
         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail="page not found")
    
    

    if posts.owner_id != int(get_current_user.id):
         raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,
                            detail="invalid request for this credential")
    posts_query.update(post.dict())
    db.commit()
    return posts_query.first()